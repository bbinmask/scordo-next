// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  player
  fan
  admin
}

enum Gender {
  male
  female
  other
}

enum Availability {
  available
  injured
  on_break
}

enum MatchCategory {
  T10
  T20
  ODI
  Test
  others
}

enum AuthProvider {
  email
  google
  facebook
  github
}

// Embedded type 

type Address {
  city    String
  state   String
  country String
}

// Models

model UserFriend {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId   String @db.ObjectId
  friendId String @db.ObjectId

  user   User @relation("UserUserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUserFriends", fields: [friendId], references: [id])
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  isVerified   Boolean      @default(false)
  username     String       @unique
  contact      String
  bio          String?
  gender       Gender
  role         Role
  availability Availability
  dob          DateTime

  userFriends UserFriend[] @relation("UserUserFriends")
  friendUsers UserFriend[] @relation("FriendUserFriends")

  tournaments String[]
  address     Address?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  MatchPlayer MatchPlayer[]
}

model Team {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  logo         String
  banner       String
  abbreviation String
  players      String[]      @unique
  category     MatchCategory
  match        String
  ownerId      String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isRecruiting Boolean       @default(false)
  captain      String
  joinRequests String[]      @unique

  MatchTeam MatchTeam[]
}

model TournamentRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  to        String   @unique @db.ObjectId
  from      String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  to        String   @unique @db.ObjectId
  from      String   @unique @db.ObjectId
  teamId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  date        DateTime
  location    String?

  tournamentId String     @db.ObjectId
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  teams MatchTeam[]

  players MatchPlayer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchTeam {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  matchId String @db.ObjectId
  teamId  String @db.ObjectId
  match   Match  @relation(fields: [matchId], references: [id])
  team    Team   @relation(fields: [teamId], references: [id])
}

model MatchPlayer {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  matchId  String @db.ObjectId
  playerId String @db.ObjectId
  match    Match  @relation(fields: [matchId], references: [id])
  player   User   @relation(fields: [playerId], references: [id])
}

model Tournament {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  location  String?
  startDate DateTime
  endDate   DateTime
  matches   Match[]
}
