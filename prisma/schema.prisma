// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  player
  fan
  admin
}

enum Gender {
  male
  female
  other
}

enum Availability {
  available
  injured
  on_break
}

enum MatchCategory {
  T10
  T20
  ODI
  Test
  others
}

enum AuthProvider {
  email
  google
  facebook
  github
}

enum RequestStatus {
  pending
  accepted
  rejected
}

// Embedded type 

type Address {
  city    String
  state   String
  country String
}

type TournamentDetails {
  season         Int?
  maxTeams       Int
  matchesPerTeam Int
  totalOvers     Int
  minAge         Int?
  maxAge         Int?
  winnerPrice    Int?
  runnerUpPrice  Int?
  entryFee       Int?
  halfBoundary   Boolean  @default(false)
  location       Address?
}

// Models

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  isVerified   Boolean      @default(false)
  username     String       @unique
  contact      String?
  bio          String?
  gender       Gender?
  role         Role         @default(fan)
  availability Availability
  dob          DateTime
  friends      String[]     @db.ObjectId
  friendsOf    String[]     @db.ObjectId
  address      Address?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teams        String[]     @db.ObjectId
}

model Team {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  logo         String
  banner       String
  abbreviation String
  players      String[]      @db.ObjectId
  category     MatchCategory
  owner        String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isRecruiting Boolean       @default(false)
  captain      String        @db.ObjectId
  joinRequests TeamRequest[]
}

model TournamentRequest {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  to        String     @unique @db.ObjectId
  from      String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reqId     String     @db.ObjectId
  requests  Tournament @relation(fields: [reqId], references: [id])
}

model TeamRequest {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  to        String        @unique @db.ObjectId
  from      String        @unique @db.ObjectId
  status    RequestStatus
  teamId    String        @unique @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  team      Team          @relation(fields: [teamId], references: [id])
}

model Match {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teamA          String   @db.ObjectId
  teamB          String   @db.ObjectId
  teamAPlayingXI String[] @db.ObjectId
  teamBPlayingXI String[] @db.ObjectId
  overs          Int
  inning1        Inning   @relation("Inning1", fields: [inningId], references: [id])
  inning2        Inning   @relation("Inning2", fields: [inningId], references: [id])
  inning3        Inning?  @relation("Inning3")
  inning4        Inning?  @relation("Inning4")

  superOvers String[] @db.ObjectId

  status       String
  venue        Address
  uid          String        @default(uuid())
  tossWinner   String?
  tossDecision String?
  category     MatchCategory @default(others)
  date         DateTime?
  location     String?
  innings      String[]      @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inningId     String        @db.ObjectId
  inningId     String        @db.ObjectId
}

model Tournament {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  title       String              @unique
  details     TournamentDetails
  description String?
  requests    TournamentRequest[]
  organizer   String              @db.ObjectId
  rules       String[]
  startDate   DateTime
  endDate     DateTime
}

model Inning {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  matchId String @unique @db.ObjectId
  inning1 Match? @relation("Inning1", fields: [matchId], references: [id])
  inning2 Match? @relation("Inning2", fields: [matchId], references: [id])
  inning3 Match? @relation("Inning3", fields: [matchId], references: [id])
  inning4 Match? @relation("Inning4", fields: [matchId], references: [id])
}
