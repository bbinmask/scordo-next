generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  player
  fan
  admin
}

enum Gender {
  male
  female
  other
}

enum Availability {
  available
  injured
  on_break
}

enum MatchCategory {
  T10
  T20
  ODI
  Test
  others
}

enum TeamType {
  local
  club
  college
  corporate
  others
}

enum AuthProvider {
  email
  google
  facebook
  github
}

enum RequestStatus {
  pending
  accepted
  rejected
}

enum WicketType {
  BOWLED
  CAUGHT
  RUN_OUT
  LBW
  STUMPED
  HIT_WICKET
}

enum MatchStatus {
  not_started
  in_progress
  completed
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

type Address {
  city    String
  state   String
  country String
}

type TournamentDetails {
  season         Int?
  maxTeams       Int
  matchesPerTeam Int
  totalOvers     Int
  minAge         Int?
  maxAge         Int?
  winnerPrice    Int?
  runnerUpPrice  Int?
  entryFee       Int?
  halfBoundary   Boolean  @default(false)
  location       Address?
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String       @unique
  name         String
  username     String       @unique
  email        String       @unique
  contact      String?
  gender       Gender?
  role         Role         @default(fan)
  dob          DateTime
  availability Availability @default(available)
  avatar       String?
  isVerified   Boolean      @default(false)
  bio          String?
  address      Address?

  teamsOwned       Team[]        @relation("UserTeams")
  captainOf        Team[]        @relation("TeamCaptain")
  tournaments      Tournament[]  @relation("TournamentOrganizer")
  players          Player[]      @relation("UserPlayerEntries")
  sentRequests     TeamRequest[] @relation("SentRequests")
  receivedRequests TeamRequest[] @relation("ReceivedRequests")

  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  status FriendshipStatus @default(PENDING)

  requesterId String @db.ObjectId
  requester   User   @relation("SentFriendRequests", fields: [requesterId], references: [id])

  addresseeId String @db.ObjectId
  addressee   User   @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requesterId, addresseeId])
}

model Team {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  logo         String?
  banner       String?
  abbreviation String
  address      Address?
  type         TeamType @default(others)
  isRecruiting Boolean  @default(false)

  ownerId   String  @db.ObjectId
  owner     User    @relation("UserTeams", fields: [ownerId], references: [id])
  captainId String? @db.ObjectId
  captain   User?   @relation("TeamCaptain", fields: [captainId], references: [id])

  players           Player[]            @relation("TeamPlayers")
  joinRequests      TeamRequest[]       @relation("TeamJoinRequests")
  tournamentRequest TournamentRequest[] @relation("TeamTournamentRequests")

  matchesAsTeamA Match[] @relation("TeamA")
  matchesAsTeamB Match[] @relation("TeamB")

  inningsBatted Inning[] @relation("BattingInnings")
  inningsBowled Inning[] @relation("BowlingInnings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String            @unique
  details     TournamentDetails
  description String?
  organizerId String            @db.ObjectId

  organizer User                @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  requests  TournamentRequest[] @relation("TournamentJoinRequests")
  matches   Match[]             @relation("TournamentMatches")

  rules     String[]
  startDate DateTime
  endDate   DateTime
}

model TournamentRequest {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  teamId       String @db.ObjectId
  tournamentId String @db.ObjectId

  team       Team       @relation("TeamTournamentRequests", fields: [teamId], references: [id])
  tournament Tournament @relation("TournamentJoinRequests", fields: [tournamentId], references: [id])

  status    RequestStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([teamId, tournamentId])
}

model TeamRequest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  toId   String @db.ObjectId
  fromId String @db.ObjectId
  teamId String @db.ObjectId

  to   User @relation("ReceivedRequests", fields: [toId], references: [id])
  from User @relation("SentRequests", fields: [fromId], references: [id])
  team Team @relation("TeamJoinRequests", fields: [teamId], references: [id])

  status    RequestStatus @default(pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([toId, fromId, teamId])
}

model Match {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  teamAId      String  @db.ObjectId
  teamBId      String  @db.ObjectId
  tournamentId String? @db.ObjectId

  teamA      Team        @relation("TeamA", fields: [teamAId], references: [id])
  teamB      Team        @relation("TeamB", fields: [teamBId], references: [id])
  tournament Tournament? @relation("TournamentMatches", fields: [tournamentId], references: [id])

  innings      Inning[]      @relation("MatchInnings")
  venue        Address
  tossWinner   String?
  tossDecision String?
  category     MatchCategory @default(others)
  date         DateTime?
  location     String?

  status MatchStatus @default(not_started)
  result String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inning {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  matchId       String @db.ObjectId
  battingTeamId String @db.ObjectId
  bowlingTeamId String @db.ObjectId

  match       Match @relation("MatchInnings", fields: [matchId], references: [id])
  battingTeam Team  @relation("BattingInnings", fields: [battingTeamId], references: [id])
  bowlingTeam Team  @relation("BowlingInnings", fields: [bowlingTeamId], references: [id])

  runs    Int @default(0)
  wickets Int @default(0)
  overs   Int @default(0)
  balls   Int @default(0)

  currentStrikerId    String? @unique @db.ObjectId
  currentNonStrikerId String? @unique @db.ObjectId
  currentBowlerId     String? @unique @db.ObjectId

  currentStriker    Player? @relation("CurrentStriker", fields: [currentStrikerId], references: [id])
  currentNonStriker Player? @relation("CurrentNonStriker", fields: [currentNonStrikerId], references: [id])
  currentBowler     Player? @relation("CurrentBowler", fields: [currentBowlerId], references: [id])

  ballsData     Ball[]          @relation("InningBalls")
  InningBatting InningBatting[] @relation("InningBatsmenStats")
  InningBowling InningBowling[] @relation("InningBowlerStats")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  teamId String @db.ObjectId

  user User @relation("UserPlayerEntries", fields: [userId], references: [id])
  team Team @relation("TeamPlayers", fields: [teamId], references: [id])

  inningsBatting InningBatting[] @relation("PlayerBattingStats")
  inningsBowling InningBowling[] @relation("PlayerBowlingStats")

  ballsBatted  Ball[] @relation("Batsman")
  ballsBowled  Ball[] @relation("Bowler")
  ballsFielded Ball[] @relation("Fielder")

  inningAsStriker    Inning? @relation("CurrentStriker")
  inningAsNonStriker Inning? @relation("CurrentNonStriker")
  inningAsBowler     Inning? @relation("CurrentBowler")
}

model InningBatting {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  playerId String @db.ObjectId

  inning Inning @relation("InningBatsmenStats", fields: [inningId], references: [id])
  player Player @relation("PlayerBattingStats", fields: [playerId], references: [id])

  runs  Int     @default(0)
  balls Int     @default(0)
  fours Int     @default(0)
  sixes Int     @default(0)
  isOut Boolean @default(false)
  dots  Int     @default(0)
}

model InningBowling {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  playerId String @db.ObjectId

  inning Inning @relation("InningBowlerStats", fields: [inningId], references: [id])
  player Player @relation("PlayerBowlingStats", fields: [playerId], references: [id])

  overs   Int @default(0)
  balls   Int @default(0)
  runs    Int @default(0)
  wickets Int @default(0)
  maidens Int @default(0)
  noBalls Int @default(0)
  wides   Int @default(0)
}

model Ball {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  inningId  String  @db.ObjectId
  batsmanId String  @db.ObjectId
  bowlerId  String  @db.ObjectId
  fielderId String? @db.ObjectId

  inning  Inning  @relation("InningBalls", fields: [inningId], references: [id])
  batsman Player  @relation("Batsman", fields: [batsmanId], references: [id])
  bowler  Player  @relation("Bowler", fields: [bowlerId], references: [id])
  fielder Player? @relation("Fielder", fields: [fielderId], references: [id])

  over Int
  ball Int

  runs          Int         @default(0)
  isWide        Boolean     @default(false)
  isNoBall      Boolean     @default(false)
  isBye         Boolean     @default(false)
  isLegBye      Boolean     @default(false)
  isWicket      Boolean     @default(false)
  dismissalType WicketType?

  createdAt DateTime @default(now())
}
