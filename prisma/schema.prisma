// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  player
  fan
  admin
}

enum Gender {
  male
  female
  other
}

enum Availability {
  available
  injured
  on_break
}

enum MatchCategory {
  T10
  T20
  ODI
  Test
  others
}

enum TeamType {
  local

  club

  college

  corporate

  others
}

enum AuthProvider {
  email
  google
  facebook
  github
}

enum RequestStatus {
  pending
  accepted
  rejected
}

enum ExtraType {
  WIDE
  NO_BALL
  BYE
  LEG_BYE
}

enum WicketType {
  BOWLED
  CAUGHT
  RUN_OUT
  LBW
  STUMPED
  HIT_WICKET
}

// Embedded type 

type Address {
  city    String
  state   String
  country String
}

type TournamentDetails {
  season         Int?
  maxTeams       Int
  matchesPerTeam Int
  totalOvers     Int
  minAge         Int?
  maxAge         Int?
  winnerPrice    Int?
  runnerUpPrice  Int?
  entryFee       Int?
  halfBoundary   Boolean  @default(false)
  location       Address?
}

// Models

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  avatar       String?
  isVerified   Boolean      @default(false)
  username     String       @unique
  contact      String?
  bio          String?
  gender       Gender?
  role         Role         @default(fan)
  availability Availability
  dob          DateTime
  friends      String[]     @db.ObjectId
  friendsOf    String[]     @db.ObjectId
  address      Address?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teams        String[]     @db.ObjectId
}

model Team {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  logo         String?
  banner       String
  abbreviation String
  address      Address?
  players      String[]      @db.ObjectId
  type         TeamType      @default(others)
  owner        String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isRecruiting Boolean       @default(false)
  captain      String        @db.ObjectId
  joinRequests TeamRequest[]

  Player Player[]
}

model Tournament {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  title       String              @unique
  details     TournamentDetails
  description String?
  requests    TournamentRequest[]
  organizer   String              @db.ObjectId
  rules       String[]
  startDate   DateTime
  endDate     DateTime
}

model TournamentRequest {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  to        String     @unique @db.ObjectId
  from      String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  reqId     String     @db.ObjectId
  requests  Tournament @relation(fields: [reqId], references: [id])
}

model TeamRequest {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  to        String        @unique @db.ObjectId
  from      String        @unique @db.ObjectId
  status    RequestStatus
  teamId    String        @unique @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  team      Team          @relation(fields: [teamId], references: [id])
}

model Match {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teamA          String   @db.ObjectId
  teamB          String   @db.ObjectId
  teamAPlayingXI String[] @db.ObjectId
  teamBPlayingXI String[] @db.ObjectId
  overs          Int

  innings Inning[]

  superOvers String[] @db.ObjectId

  status       String
  venue        Address
  uid          String        @default(uuid())
  tossWinner   String?
  tossDecision String?
  category     MatchCategory @default(others)
  date         DateTime?
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Inning {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  matchId String @db.ObjectId
  match   Match  @relation(fields: [matchId], references: [id])

  battingTeam String @db.ObjectId
  bowlingTeam String @db.ObjectId

  runs    Int @default(0)
  wickets Int @default(0)
  overs   Int @default(0)
  balls   Int @default(0)

  currentStrikerId    String? @db.ObjectId
  currentNonStrikerId String? @db.ObjectId
  currentBowlerId     String? @db.ObjectId

  // Relations
  striker    Player? @relation("Striker", fields: [currentStrikerId], references: [id])
  nonStriker Player? @relation("NonStriker", fields: [currentNonStrikerId], references: [id])
  bowler     Player? @relation("Bowler", fields: [currentBowlerId], references: [id])

  ballsData Ball[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InningBatting InningBatting[]

  InningBowling InningBowling[]

  Delivery Delivery[]
}

model Ball {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  inning   Inning @relation(fields: [inningId], references: [id])

  over Int
  ball Int

  batsmanId String @db.ObjectId
  bowlerId  String @db.ObjectId

  runs          Int     @default(0)
  isWide        Boolean @default(false)
  isNoBall      Boolean @default(false)
  isBye         Boolean @default(false)
  isLegBye      Boolean @default(false)
  isWicket      Boolean @default(false)
  dismissalType String? // e.g. "bowled", "caught", "run out"

  createdAt DateTime @default(now())
}

model Player {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id])

  inningsBatting   InningBatting[]
  inningsBowling   InningBowling[]
  deliveriesFaced  Delivery[]      @relation("BatterDeliveries")
  deliveriesBowled Delivery[]      @relation("BowlerDeliveries")

  Inning            Inning[] @relation("Striker")
  NonStrikerInnings Inning[] @relation("NonStriker")
  BowlerInnings     Inning[] @relation("Bowler")
}

model InningBatting {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  inning   Inning @relation(fields: [inningId], references: [id])

  playerId String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])

  runs      Int     @default(0)
  balls     Int     @default(0)
  fours     Int     @default(0)
  sixes     Int     @default(0)
  isOut     Boolean @default(false)
  dismissal String?
}

model InningBowling {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  inning   Inning @relation(fields: [inningId], references: [id])

  playerId String @db.ObjectId
  player   Player @relation(fields: [playerId], references: [id])

  overs   Int @default(0)
  balls   Int @default(0)
  runs    Int @default(0)
  wickets Int @default(0)
  maidens Int @default(0)
  noBalls Int @default(0)
  wides   Int @default(0)
}

model Delivery {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  inningId String @db.ObjectId
  inning   Inning @relation(fields: [inningId], references: [id])

  overNumber Int
  ballNumber Int
  legalBall  Boolean @default(true)

  batterId String @db.ObjectId
  batter   Player @relation("BatterDeliveries", fields: [batterId], references: [id])

  bowlerId String @db.ObjectId
  bowler   Player @relation("BowlerDeliveries", fields: [bowlerId], references: [id])

  runsOffBat Int         @default(0)
  extras     Int         @default(0)
  extraType  ExtraType?
  isWicket   Boolean     @default(false)
  wicketType WicketType?
  dismissal  String?
}
